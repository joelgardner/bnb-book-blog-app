scalar Date

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
}

input UserInput {
  email: String
  firstName: String
  lastName: String
}

type LocalAuth {
  id: ID!
  user: User!
  password: String!
}

type Property {
  id: ID!
  owner: User!
  rooms: [Room]
  street1: String!
  street2: String
  city: String!
  state: String!
}

input PropertyInput {
  owner: UserInput
  rooms: [RoomInput]
  street1: String
  street2: String
  city: String
  state: String
}

type Room {
  id: ID!
  name: String!
  price: Float
  description: String
  image: File
}

input RoomInput {
  name: String
  price: Float
  description: String
  image: FileInput
}

type File {
  id: ID!
  url: String!
}

input FileInput {
  url: String
}

type Booking {
  id: ID!
  room: Room!
  email: String!
  start: Date!
  end: Date!
}

input SearchParameters {
  searchText: String
  sortAsc: Boolean
  sortKey: String
  first: Int
  skip: Int
}

type Query {
  fetchUser(id: ID!): User
  listProperties(args: PropertyInput, search: SearchParameters) : [Property]
  listRooms(args: RoomInput, search: SearchParameters) : [Room]
}

type Mutation {
  createUser(input: UserInput): User
  updateUser(id: ID!, input: UserInput): User
  deleteUser(id: ID!): User
  createBooking(roomId: ID!, email: String!, start: Date!, end: Date!): Booking
}
